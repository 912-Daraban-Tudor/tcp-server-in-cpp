// test/test_lcg.cpp
#include "../src/crypto_lcg.h"
#include <vector>
#include <cstdint>
#include <cassert>
#include <iostream>

int main() {
    std::string user = "testuser";
    std::string pass = "testpass";
    uint8_t seq = 87; // 0x57

    uint8_t us = checksum8_str_ascii(user); // expect 0x7F
    uint8_t ps = checksum8_str_ascii(pass); // expect 0x77
    uint32_t seed = (uint32_t(seq) << 16) | (uint32_t(us) << 8) | ps;

    const size_t N = 80;
    std::vector<uint8_t> ks(N);
    lcg_keystream(seed, ks.data(), ks.size());

    const std::vector<uint8_t> expected = {
            0xE5,0xBA,0x6B,0xC9,0xCE,0xEF,0xFC,0x86,0x48,0xE1,0x06,0xC8,0x62,0xF3,0xB1,0x96,
            0x18,0x72,0xC4,0xAD,0xE2,0x74,0x9D,0x13,0x51,0xB7,0x24,0x8E,0xB0,0x2A,0x1B,0xB9,
            0xFE,0x60,0x19,0xDF,0x2D,0x62,0xF4,0x1E,0xFF,0xCC,0x16,0x98,0xF2,0x44,0x2E,0xCF,
            0x5D,0xD2,0xA4,0x0E,0x30,0xA9,0x2F,0x3D,0x32,0x83,0x01,0xA6,0xE7,0x95,0xAB,0x09,
            0x0E,0x30,0xA9,0x2F,0x3D,0x32,0x83,0x00,0x3A,0xEC,0xB6,0xB8,0x91,0xF7,0x65,0x3A
    };

    assert(ks.size() >= expected.size());
    for (size_t i = 0; i < expected.size(); ++i) {
        if (ks[i] != expected[i]) {
            std::cerr << "Keystream mismatch at " << i
                      << " exp=" << int(expected[i]) << " got=" << int(ks[i]) << "\n";
            return 1;
        }
    }
    std::cout << "LCG test passed.\n";
    return 0;
}
